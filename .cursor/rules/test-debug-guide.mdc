---
description: test debug guide
globs: 
alwaysApply: false
---
# テスト・デバッグのガイド

## 基本原則

- テストやデバッグ中は、一つ一つのステップを着実に進めること。それぞれのステップを曖昧にしてはいけない。
- 各ステップで何をしているのか、またその目的が何かをユーザーに簡潔に説明しながら進める。

## テスト

- テストの種類には、単体テスト、結合テスト、E2Eテスト等がある
- 各テストは正常系テストと異常系テストからなる
- 正常系テスト
  - 想定通り、正常に動作した場合のみ合格とする
  - 見逃しを許さない。例えば想定通り動作しない場合だけでなく、何らかの理由でテストを実行できない場合も不合格とする
  - 偽陽性（間違った期待値と間違った出力を比較して、一致すること）が生じないテスト条件を作成する
- 異常系テスト
  - 異常系テストは、あればベターとし、なくてもNGとはしない。

テストが期待通りの結果を返さない場合は、テストを修正するが、これは{{デバッグ}}と同様のフローで取り組むこと。
次のデバッグで課題を解決したとき、 次回以降で類似の課題をすぐに発見できるよう、正常系テストケースを追加する。
テストファイルはテストの目的や種類別に作成し、管理しやすいよう適切なサイズを維持する。

## デバッグ

### ワークフロー
- {{課題を把握}}し、取り組む課題を必要に応じてユーザーと一緒に決める
- 課題の{{原因を特定}}する
- {{課題を解決}}する
- 必要に応じてテストケースを追加する

### 定義
- name: 課題を把握
  description: 現在どのような課題が発生しているか全体像を把握する。また課題同士の関係性と構造を理解する。その上で、課題の優先順位を決める。課題の優先順位については必要に応じてユーザーと相談する。

- name: 特定原因
  description: 真の原因と一致する確率が90%以上と推定される仮説のこと。

- name: 原因を特定
  description: 課題を生じさせている原因を特定する。原因を特定するステップは
  - 原因の仮説を立てる。仮説が一つの場合は、それが原因となる。
  - {{原因特定のテクニック}}等を用い、複数の仮説を検証し、{{特定原因}}を発見するまで、検証を続ける。

- name: 課題を解決
  description: 特定した原因を除去し、課題を解決する。 課題を解決するステップは、実行優先順位の高い順に
  - 同等以上の機能を提供する、より良いコードを実装する
  - コードの実装が無理と判断した場合、より広範囲の修正となる代替案をユーザーと検討する
  - ユーザーと相談してその機能の実現を諦める

- name: 原因特定のテクニック
  description:
  テクニックの一つに「ログ挿入と動作確認」がある。以下の手順で行う。
  - 動作が不明確な箇所にデバッグログを挿入する。その際、ソースコードの機能は絶対に変更しない。
  - アプリを動作させ、挿入したデバッグログが表示されることを確認する。
  - {{特定原因}}を発見するまで、上記を繰り返す。
  - 挿入したデバッグログを削除する。

  サーバー側はもちろん、クライアントサイドでも有効な手段である。
  クライアントサイドで用いる場合、Playwrightモジュールを使ってログ収集を自動化すること。

- name: 単体テスト
  description: 関数やクラスメソッド単体の機能テストのこと。他の関数やネットワーク接続とは独立してテストされる。{{標準テストツール}}を用いる。
  path: **/test

- name: 結合テスト
  description: 関数同士や、関数とネットワーク先のAPI等との組み合わせテスト。{{標準テストツール}}を用いる
  path: **/test

- name: 標準テストツール
  description: {{単体テスト}}や{{結合テスト}}を実行するための標準的なツール。
  action:
```bash
  npx vitest run テストファイル.ts -t "テストケース名"
```

- name: E2Eテスト
  description: end to end(E2E)テストのこと。{{E2Eテストツール}}を活用する。テストファイルのパスは以下であることが多い。テストが合格しない場合、ブラウザコンソールログも確認しながら{{特定原因}}を探すこと。
  path: **/test/e2e

- name: E2Eテストツール
  description: E2Eテストを実行するツールのこと。主として以下のツールを用いる。
  action:
```bash
  npx playwright test テストファイル.spec.ts --grep "テストケース名" --reporter=line --timeout=60000
```


